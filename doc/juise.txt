#
# $Id$
#

JUISE is a environment for writing, debugging, and executing SLAX
scripts.  This environment is tailored to the needs of JUNOS-oriented
scripts, including op scripts, commit scripts, and event scripts.  In
addition, there are tools to invoke scripts via web servers.

* JUISE

The JUISE project is the JUNOS User Interface Scripting Environment,
which allows scripts to be written, debugged, and executed outside the
normal JUNOS environment.  JUNOS-specific extension functions are
available for scripts.

JUISE scripts are typically written in SLAX, an alternative syntax for
XSLT.  For information about SLAX, refer to libslax.googlecode.com.

The JUISE software can be used to execute scripts independent of
JUNOS, allowing the use of SLAX scripts in the off-box world.

JUISE includes mechanisms that convert between SLAX and XSLT, making
it suitable for plug-ins for environments like Eclipse.

JUISE includes a plug-in module for lighttpd, allowing the execution
of scripts via HTTP.

JUISE also include a rudimentary NETCONF server, allowing JUNOS
devices to invoke RPCs to unix devices.

** Getting JUISE

JUISE is available as an open-source project via google code using the
following URL:

    http://juise.googlecode.com

Refer to the ./README file for building instructions.

** The "juise" Command

The "juise" command is the central program of the JUISE project.  It
is used to test, format, convert, debug, and execute scripts.

*** Syntax

Usage: juise [@target] [options] [script] [param value]*

The juise command is invoked with the name of the script to be run.  A
set of options are used to tailor the execution of the script, and a
set of name/value parameter pairs can be provided, as they are for the
JUNOS "op" command.

A token containing an '@' will be taken as the default target of a
jcs:open() call, allowing either "user@device" or "@device".

*** Command Line Options

--agent
-A

Enable forwarding of ssh-agent credentials, allowing remote ssh
sessions to connect to the local ssh-agent process.

--debug
-d

Start the libslax debugger, allowing the user to interactively debug
script execution.  Refer to the documentation in the libslax
distribution for more information (libslax.googlecode.com).

--directory <dir>
-D <dir>

Use the given directory as the location for server scripts.  This
directory can also be set using the JUISE_DIR environment variable.

--include <dir>
-I <dir>

Add the given directory to the search path for files that are
referenced via the SLAX "include" or "import" statements.

--indent
-g

Make indented output as if the script contained:

    output-method {
        indent "yes";
    }

(The "-g" is for "good-looking output").

--input <file>
-i <file>

Use given file for input.

--junoscript
-J

Default to using the older JUNOScript XML API instead of the NETCONF
API for jcs:open() connections.

--lib <dir>
-L <dir>

Add the given directory to the list of directories searched for
dynamic extension libraries.  Refer to libslax for more information.

--no-randomize

Avoid initializing the random number generator so script execution can
be predictable (e.g. during debugging).

--param <name> <value>
-a <name> <value>

An alternative method of giving parameters to a script.

--protocol <name>
-P <name>

Use the given protocol as the default protocol for jcs:open()
connections. 

--run-server
-R

Run juise in server mode, where it accepts incoming RPCs and executes
scripts given by the RPC name.  See ^server^ section for details.

--script <name>
-S <name>

An alternative method of giving the script name.

--target <name>
-T <name>

An alternative method of giving the default target name.

--trace <file>
-t <file>

Save trace data to the given file.

--user <name>
-u <name>

An alternative method of giving the user name for API connections.

--verbose
-v

Enable debugging output.  Any calls to slaxLog() will be displayed.

--version
-V

Display any version information, including the versions of libslax,
libxslt, libxml2, and libcurl.  After displaying this information,
juise will exit.

--wait <seconds>

After starting and parsing arguments, juise will wait for the
specified number of seconds, allowing the user to attach to the
process with "gdb" for additional debugging.

*** Running JUNOS Scripts

The information passed to scripts depends on the mode in which the
script operates.  This section describes the modes of juise that
relate to JUNOS.

**** Op Scripts

Op scripts are passed an empty document as input.  Any command line
parameters are passed as SLAX parameters.  Output can be generated by
"message" statements and "jcs:output" calls, as well as by the XML
document which the script generates.

**** Commit Scripts

Commit scripts are not yet functional.

**** Event Scripts

Event scripts are not yet functional.

*** Running Native Scripts

juise can also be used to develop scripts that are not intended to run
under JUNOS.  The off-box environment gives a number of distinct
advantages for scripts that operate like "op" scripts.  These scripts
join the simplicity and flexibility of SLAX to the unix environment.

**** "#!/usr/bin/slax"

The SLAX parser supports the "#!" mechanism which is a normal part of
the unix environment.  This allows scripts beginning
with the line "#!/usr/bin/slax" to be executed directly from the
command line.

    #!/usr/bin/slax
    match / { message "this works"; }

If this script file is given the appropriate "executable" permission
bit (such as "chmod a+x works"), then the command "works" will work.

    % works
    this works
    %

Additional options can be added to the "#!" line:

    #!/usr/bin/slax -g --param check yes

** mod_juise

The JUISE project includes a plug-in module for the "lighttpd" (aka
"lightey") web server.  This plug-in allows scripts to be run directly
from lighttpd will allowing SSH credentials established using
"ssh-agent" to be inherited by the SLAX script.  SSH connections,
including those from the jcs:open() call, can be opened without
prompting for a passphrase.

To add mod_juise to your lighttpd server, add the following line to
your lighttpd.conf file:

    juise.assign = ( ".slax" => "juise.cgi" )

*** juise.cgi

When a file ending in ".slax" is requested, lighttpd will pass the
request to mod_juise which will invoke juise using the "juise.cgi"
driver.  This driver will fetch the CGI-defined variables and make
them available to the script as both global parameters and as elements
inside the "$cgi" global parameter.  Scripts are free to use either
method to retrieve these values.  The following table list the CGI
parameter name and the $cgi element name.

|-------------------+-------------------|
| Parameter Name    | Element Name      |
|-------------------+-------------------|
| CONTENT_LENGTH    | content-length    |
| DOCUMENT_ROOT     | document-root     |
| GATEWAY_INTERFACE | gateway-interface |
| HTTPS             | https             |
| LD_LIBRARY_PATH   | ld-library-path   |
| LD_PRELOAD        | ld-preload        |
| PATH_INFO         | path-info         |
| QUERY_STRING      | query-string      |
| REDIRECT_STATUS   | redirect-status   |
| REMOTE_ADDR       | remote-addr       |
| REMOTE_PORT       | remote-port       |
| REMOTE_USER       | remote-user       |
| REQUEST_METHOD    | request-method    |
| REQUEST_URI       | request-uri       |
| SCRIPT_FILENAME   | script-filename   |
| SCRIPT_NAME       | script-name       |
| SERVER_ADDR       | server-addr       |
| SERVER_NAME       | server-name       |
| SERVER_PORT       | server-port       |
| SERVER_PROTOCOL   | server-protocol   |
| SERVER_SOFTWARE   | server-software   |
| SYSTEMROOT        | systemroot        |
|-------------------+-------------------|

The following lines are equivalent:

    expr "User is " _ $REMOTE_USER;
    expr "User is " _ $cgi/remote-user;

In addition $cgi has an element named "parameters" which has the
fields of $QUERY_STRING broken into individual elements.  These are
also available as global parameters.  The following lines are
equivalent: 

    expr "'from' parameter is " _ $cgi/parameters/from;
    expr "'from' parameter is " _ $from;

The full set of parameters can be accessed using this parameters
element:

    for-each ($cgi/parameters) {
        expr "Parameter '" _ name() _ "' is '" _ . _ "'";
    }

*** The <cgi> Element

When SLAX scripts are invoked via mod_juise, the script can choose to
emit a top level element named <cgi>.  This element is used to supply
directions to the HTTP server.

*** Attributes

Any non-namespace attributes given on the <cgi> element is converted
into a header field in the HTTP reply message.  The attribute name is
the header field and the attribute value is the header value.

    <cgi Content-Type="text/html" X-Address=$REMOTE_ADDR>
        ...
    </cgi>

The above element would be turned into:

    Content-Type: text/html
    X-Address: 10.1.2.3

Additional attributes and elements may be defined under the <cgi>
element.  For future proofing, script should avoid attributes and
elements whose names being with "junos", "cgi", or "juise".

** NETCONF Server @server@

juise can perform as a NETCONF server using the "-R" or "--run-server"
option.

XXX needs more

** Extension Libraries

The JUISE project includes several dynamic extension, which are
installed into the normal extension directory where they are available
for any SLAX script.  This section details the extension functions and
element of those libraries.

*** jcs

**** jcs:open

**** jcs:execute

**** jcs:invoke

**** jcs:close

*** curl

curl and libcurl are software components that allow access to a number
of protocols, include http, https, smtp, ftp, and scp.

**** curl Elements

***** <url>

The <url> element sets the base URL for the request.

    SYNTAX::
      <url> "target-url";

***** <method>

The <method> element sets the method used to transfer data.  This
controls the HTTP request type, as well as triggering other transfer
mechanisms.

    SYNTAX::
      <method> $method;

Method names are listed in the table below.

|--------|
| Method |
|--------|
| get    |
| post   |
| delete |
| head   |
| email  |
| put    |
| upload |
|--------|

The "get" method is the default.

***** <username>

The <username> element sets the user name to use for the transfer.

    SYNTAX::
      <username> "username";

***** <password>

The <password> element sets the user's password for the transfer.

    SYNTAX::
      <password> "password";

***** <content-type>

The <content-type> element gives the MIME type for the transfer
payload.

    SYNTAX::
      <content-type> "mime/type";

***** <contents>

The <contents> element gives the contents to be transfered.

    SYNTAX::
      <contents> "multi-\nline\ncontents\n";

***** <format>

The <format> element gives the expected format of the returned
results, allowing the curl extension to automatically make the content
available in the native format.

<format> "xml"; 

|-------------+--------------------------|
| Format name | Special behavior         |
|-------------+--------------------------|
| html        | Result is parsed as HTML |
| text        | None                     |
| xml         | Result is parsed as XML  |
|-------------+--------------------------|

***** <server>

The <server> element gives the outgoing SMTP server name.  At present,
MX records are not handled, but that will be fixed shortly.

    SYNTAX::
      <server> "email-server.example.com";

***** <local>

The <local> element gives the name to use as the local hostname for
"email" (SMTP) requests .

    SYNTAX::
      <local> "local host name";

***** <from>

The <from> element gives the "From" address to use for "email" (SMTP)
requests.

    SYNTAX::
      <from> "source-user@email.example.com";

***** <subject>

The <subject> element gives the "Subject" field for "email" (SMTP)
requests. 

    SYNTAX::
      <subject> "email subject string";

***** <upload>

The <upload> element indicates this is a file upload request.

    SYNTAX::
      <upload>;

***** <fail-on-error>

The <fail-on-error> element indicates that the transfer should fail if
any errors where detected, including insignificant ones.

    SYNTAX::
      <fail-on-error>;

***** <verbose>

The <verbose> element requests an insanely detailed level of debug
information that can be useful when debugging requests.  The curl
extension will display detailed information about the operations and
communication of the curl transfer.

    SYNTAX::
      <verbose>;

***** <insecure>

The <insecure> element indicates a willingness to tolerate insecure
communications operations.  In particular, it will
allow SSL Certs without checking the common name.

    SYNTAX::
      <insecure>;

***** <secure>

The <secure> element requests the use of the "secure" sibling of many
protocols, including HTTPS and FTPS.

    SYNTAX::
      <secure>;

***** <to>

The <to> element gives a "To" address for "email" (SMTP) requests.
For multiple address, use multiple <to> elements.

    SYNTAX::
      <to> "to-user@email.examplecom";

***** <cc>

The <cc> element gives a "Cc" address for "email" (SMTP) requests.
For multiple address, use multiple <cc> elements.

    SYNTAX::
      <cc> "cc-user@email.examplecom";

***** <header>

The <header> element gives additional header fields for the request.

    SYNTAX::
      <header name="name"> "value";

***** <param>

The <param> element gives additional parameter values for the
request.  These parameters are typically encoded into the URL.

    SYNTAX::
      <param name="x"> "y";

**** curl:perform

The "curl:perform" extension function performs simple transfers.

**** curl:open

**** curl:set

**** curl:single

**** curl:close


{{document:
    name juise-manual;
    private "The JUISE Project";
    ipr none;
    category exp;
    abbreviation JUISE-MANUAL;
    title "The JUISE Project: JUNOS User Interface Scripting Environment";
    contributor "author:Phil Shafer:Juniper Networks:phil@juniper.net";
}}
